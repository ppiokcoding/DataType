package DataType;

public class dataType01 {

	//Ctrl + Space > Code Assist(Eclipse), Intellisence(Visual Studio)
	//			   > 현재 상황(문맥, Context)에 걸맞는 코드 제시
	//코드 조각(Code snippet), 자동 완성
	//main 등 미리 등록된 키워드에 위의 단축키를 누르면 편하게 코드 조각을 제공한다.
	
	public static void main(String[] args) {
		
		/*
		 
		 [자료형, Data Type]
		 - 데이터의 형태
		 - 데이터의 길이(범위)와생김새를 미리 정의하고 분류해 놓은 규칙 + 이름
		 
		 생김새
		 1, 2, 3,...,10, 234, 102, 1234182   -> 정수
		 5.3, 3.14, 1234.1, 0.123, 1234.134	 -> 실수
		 노트북, 문자열, 포스트잇, 책상			 -> '문자', '문자열' 
		 
		 => 이런것들을 통틀어서 자료형 이라고 함
		 
		 10 -> 정수, int
		 10000000000000 -> 정수, long   즉, 길이에 따라 많은 규칙을 만들어 놓음
		 뾱 -> char (캐릭터)
		 삐옥이 -> String
		 
		 프로그래밍의 자료형
		 1. 생김새
		 2. 크기(길이)
		 
		 [자바 언어의 자료형]
		 
		 1. 원시형(Primitive Type), 값형(Value Type)
		 1-1. 숫자형
		 1) 정수형
		 	a. byte
		 		- 1byte (= 8bit)
		 		- 정수(형태) + 길이(1byte)
		 		- -128 ~ +127
		 		
		 	b. short
		 		- 2byte (= 16bit)
		 		- 정수(형태) + 길이(2byte)
		 		- 2^16
		 		- -2^15 ~ (+2^15-1)
		 		- -32768 ~ 32767
		 		- -3만 2천 ~ 3만 2천사이를 저장한다고 생각하면 됨
		 		
		 
		 	c. int
		 		- 4byte(= 32bit)
		 		- 정수(형태) + 길이(4byte)
		 		- -21억 ~ +21억
		 	
		 	
		 	d. long
		 		- 8byte(= 64bit)
		 		- 정수(형태) + 길이(8byte)
		 		- -922경 ~ +922경 (자바는 여기까지 저장 가능)
		 		
		 
		 2) 실수형
		 
		  - float과 double은 자료형의 길이가 중요하지 않다.
		  - 최댓값과 최솟값이 얼마인지 중요하지 않다.
		  - 항상 손실분 발생(특히 연산 과정에서 발생한다)
		  - 가수부(유효 자리) x 지수부(자릿수)
		  
		 	a. float
		 		- 단정도형(정도 = 정밀도)
		 		- 4byte
		 		- 실수(형태) + 길이(4byte)
		 		- -∞ ~ +∞
		 		
		 	b. double
		 		- 배정도형(정도 = 정밀도)
		 		- 8byte
		 		- 실수(형태) + 길이(8byte)
		 		- -∞ ~ +∞
		 
		 
		 1-2. 문자형
		 1)문자형
		 	a. char
		 		- 2byte(= 16bit) > UniCode
		 		- 문자(형태)
		 		- 숫자형 -> 문자코드(= 문자코드값) 
		 			> 메모리에 숫자로 저장되어 있기 때문이다. 물리적으로는 숫자형 이지만 데이터는 문자
		 
		 1-3. 논리형
		 1) 논리형
		 	a. boolean(bool)
		 		- 1byte(= 8bit)
		 		- 참, 거짓(형태)
		 		- 논리값 > 명제? > true? false?
		 
		 2. 참조형(Reference Type)
		 
		 */
		
		
		
	}//main
	
}
